#include "memmap.i65"

; *=$2A04
nmihook:
  php
  rep #$20 : .al
  pha
  lda @$004218
  sta @NMI_PAD
  phb
  phd
  lda #$2b00
  tcd
  sep #$20 : .as
; skip in-game buttons if disabled
  lda <NMI_BUTTONS_ENABLE
  beq nmi_patches
; read controller auto read flag
  lda <MIRROR_4200
; auto read is active, so we reuse the early snapshot taken
  bmi nmi_pad_getcmd
; no auto read; read the controller manually
; only read when no read in progress by game (do not disrupt game's readout)
  bit <PAD_LATCH
  bmi nmi_pad_getcmd
  phk
  plb
  lda #$01
  sta $4016
  stz $4016
  rep #$10 : .xl
  phx
  ldx #$0008
- lda $4016
  ror
  rol <NMI_PAD+1
  dex
  bne -
  ldx #$0008
- lda $4016
  ror
  rol <NMI_PAD
  dex
  bne -
  plx
nmi_pad_getcmd:
; button combination -> command is mapped by FPGA
  lda <NMI_CMD
  beq nmi_patches
  sta @MCU_CMD
  cmp #$83 ; disable WRAM patching
  beq nmi_disable_wram
  cmp #$82 ; enable WRAM patching
  bne nmi_patches
nmi_enable_wram:
  lda #$00
nmi_disable_wram:
  sta <NMI_WRAM_PATCH_DISABLE
nmi_patches:
; skip WRAM patching if disabled
  lda <NMI_WRAM_PATCH_DISABLE
  bne nmi_exit
; skip WRAM patching if there are no cheats
  lda <NMI_WRAM_PATCH_COUNT
  beq nmi_exit
  jsr NMI_WRAM_CHEATS
nmi_exit:
; clean up
  stz <NMI_VECT_DISABLE
  pld
  rep #$20 : .al
  plb
  pla
  plp
  jmp ($ff77) ; '77' is replaced by FPGA depending on hook entry

resethook: ; EMULATION MODE
  .as : .xs
- lda $4212
  bpl -
- lda $4212
  bmi -
  stz NMI_VECT_DISABLE
  jmp ($fffc)

.byt "bram_end"
